-- Code

local EmpNotif = loadstring(game:HttpGet("https://pastebin.com/raw/iFwSWa35"))();
local Notify = EmpNotif.Notify;

     
                  	Notify({
  					Description = "Executed";
					Title = "Emp Return Szn";
					Duration = 15;
					
                })


local new = { 
    main = { 
        Emplmfao = true,
        AirshotFunc = false
    },
    Tracer = { 
        TracerThickness = 0, 
        TracerTransparency = 0, 
        TracerColor = Color3.fromRGB(0,255,255) 
    }
}


local CurrentCamera = game:GetService "Workspace".CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()
local RunService = game:GetService("RunService")
local Plr = game.Players.LocalPlayer
local Line = Drawing.new("Line")
local Inset = game:GetService("GuiService"):GetGuiInset().Y

Mouse.KeyDown:Connect(function(KeyPressed)
    if KeyPressed == (getgenv().key) then
        if new.main.Emplmfao == true then
            new.main.Emplmfao = false
            if getgenv().notifications == true then
                Plr = FindClosestUser()
            		Notify({
  					Description = "Unvictimised";
					Title = "Emp Return Szn";
					Duration = 3;
					
                })
            end
        else
            Plr = FindClosestUser()
            new.main.Emplmfao = true
            if getgenv().notifications == true then
 				Notify({
					Description = "Victimised "..tostring(Plr.Character.Humanoid.DisplayName);
					Title = "Emp Return Szn";
					Duration = 3;
			
                })
            end
        end
    end
end)



function FindClosestUser()
    local closestPlayer
    local shortestDistance = math.huge

    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
            v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end




RunService.Stepped:connect(function()
    if new.main.Emplmfao == true then
        local Vector = CurrentCamera:WorldToViewportPoint(Plr.Character[getgenv().part].Position +
                                                              (Plr.Character.HumanoidRootPart.Velocity *
                                                                  getgenv().pred))
        Line.Color = new.Tracer.TracerColor                                                                         
        Line.Thickness = new.Tracer.TracerThickness
        Line.Transparency = new.Tracer.TracerTransparency
 

        Line.From = Vector2.new(Mouse.X, Mouse.Y + Inset)
        Line.To = Vector2.new(Vector.X, Vector.Y)
        Line.Visible = true
    else
        Line.Visible = false

    end
end)


local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if new.main.Emplmfao and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        args[3] = Plr.Character[getgenv().part].Position +
                      (Plr.Character[getgenv().part].Velocity * getgenv().pred)
        return old(unpack(args))
    end
    return old(...)
end)

if new.main.AirshotFunc == true then
    if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
        settings.main.Part = "RightFoot"
    else
        Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
            if new == Enum.HumanoidStateType.Freefall then
                settings.main.Part = "RightFoot"
            else
                settings.main.Part = "LowerTorso"
            end
        end)
    end
end

local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
local Toggled = false

Mouse.KeyDown:Connect(function(Key)
    if Key == getgenv().aakey then
        if Toggled then
            Toggled = false
            
                  	Notify({
  					Description = "Anti-Aim Toggled Off";
					Title = "Emp Return Szn";
					Duration = 3;
					
                })
            
            wait(0.1)
    
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = 2
            
        else
            
                                    		Notify({
  					Description = "Anti-Aim Toggled On";
					Title = "Emp Return Szn";
					Duration = 3;
					
                })
            
            wait(0.01)
            
            Toggled = true
            while Toggled and wait() do
 function anti()
while Toggled == true do
    task.wait()
    local oldvel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldvel.X, getgenv().velocity, oldvel.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldvel.X, oldvel.Y, oldvel.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(oldvel.X, getgenv().velocity, oldvel.Z)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = getgenv().height
   end
end

anti()
            end
        end
    end
end)

local LocalPlayer = game.Players.LocalPlayer

local Mouse = LocalPlayer:GetMouse()

local RunService = game:GetService("RunService")

local workspace = game:GetService("Workspace")

local Light = game:GetService("Lighting")

local camera = workspace.CurrentCamera

local worldToViewportPoint = camera.worldToViewportPoint


local function fail(r) return LocalPlayer:Kick(r) end

local usedCache = shared.__urlcache and next(shared.__urlcache) ~= nil

shared.__urlcache = shared.__urlcache or {}
local function httpload(url)
    local success, result

    if shared.__urlcache[url] then
        success, result = true, shared.__urlcache[url]
    else
        success, result = pcall(game.HttpGet, game, url)
    end

    if (not success) then
        return fail(string.format('Failed to GET url %q for reason: %q', url, tostring(result)))
    end

    local fn, err = loadstring(result)
    if (type(fn) ~= 'function') then
        return fail(string.format('Failed to loadstring url %q for reason: %q', url, tostring(err)))
    end

    local results = { pcall(fn) }
    if (not results[1]) then
        return fail(string.format('Failed to initialize url %q for reason: %q', url, tostring(results[2])))
    end

    shared.__urlcache[url] = result
    return unpack(results, 2)
end

local prefix = "Vv"

local function log(text)
    print(prefix..text)
end

local function warn(text)
    warn(prefix..text)
end


local ReplicatedStorage = game:GetService("ReplicatedStorage")

local MainEvent = ReplicatedStorage.MainEvent

local HB = RunService.Heartbeat

do 
   local oldFunc = nil

  oldFunc = hookfunction(MainEvent.FireServer, newcclosure(function(Event, ...)
     local args = {...}

     if args[1] == "CHECKER_1" or args[1] == "TeleportDetect" or args[1] == "OneMoreTime" then
        return nil
     end

     return oldFunc(Event, ...)
  end))

   HB:Connect(function()
       local root = LocalPlayer.Character and LocalPlayer.Character.PrimaryPart

       if root then
           for i,v in pairs(getconnections(root:GetPropertyChangedSignal("CFrame"))) do
               v:Disable()
           end
       end
   end)

  local function added(char)
     while true do
           if not char then return end
        HB:Wait()
        for i,v in pairs(char:GetChildren()) do
           if v:IsA("Script") and v:FindFirstChildOfClass("LocalScript") then
              v:FindFirstChildOfClass("LocalScript").Source = "Cleared"
              return
           end
        end
     end
  end

  if LocalPlayer.Character then
     added(LocalPlayer.Character)
  end

  LocalPlayer.CharacterAdded:Connect(added)

end

log("Bypassed Anti-Cheat")

local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
local CfsToggled = false

Mouse.KeyDown:Connect(function(Key)
    if Key == getgenv().speedkey then
        if CfsToggled then
            CfsToggled = false
                              	Notify({
  					Description = "Speed Toggled Off";
					Title = "Emp Return Szn";
					Duration = 3;
					
                })
                    else
            CfsToggled = true
            
                                          	Notify({
  					Description = "Speed Toggled On";
					Title = "Emp Return Szn ";
					Duration = 3;
					
                })
            while CfsToggled and wait() do
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame +
        game.Players.LocalPlayer.Character.Humanoid.MoveDirection * getgenv().speed
            end
        end
end
end)

	game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(KeyPressed)
 if KeyPressed == getgenv().nilcharkey then
     
                  	Notify({
  					Description = "Destroyed Character";
					Title = "Emp Return Szn";
					Duration = 3;
					
                })
     
    for L_170_forvar0, L_171_forvar1 in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if L_171_forvar1:IsA("BasePart") then
            L_171_forvar1:Destroy()
        end
    end
 end
end)
